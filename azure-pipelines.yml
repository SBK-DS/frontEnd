# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
# - main

# pool:
#   vmImage: ubuntu-latest

# steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'


trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  flutterVersion: '3.7.0'  # Adjust the Flutter version as needed

steps:
# Install dependencies for Flutter
- script: |
    sudo apt-get update
    sudo apt-get install -y curl unzip xz-utils libglu1-mesa
  displayName: 'Install dependencies'
  shell: bash

# Install Flutter SDK
- script: |
    curl -LO https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${{ variables.flutterVersion }}-stable.tar.xz
    tar xf flutter_linux_${{ variables.flutterVersion }}-stable.tar.xz
    export PATH="$PATH:`pwd`/flutter/bin"
    flutter precache
    flutter doctor
  displayName: 'Install Flutter'
  shell: bash

# Add Flutter to PATH
- script: |
    echo '##vso[task.setvariable variable=PATH]$PATH:`pwd`/flutter/bin'
  displayName: 'Add Flutter to PATH'
  shell: bash

# Install project dependencies
- script: |
    flutter pub get
  displayName: 'Install dependencies'
  shell: bash

# Run tests
- script: flutter test
  displayName: 'Run tests'
  shell: bash

# Build APK (for Android)
- script: flutter build apk --release
  displayName: 'Build Android APK'
  shell: bash

# Archive APK
- task: CopyFiles@2
  inputs:
    contents: 'build/app/outputs/flutter-apk/app-release.apk'
    targetFolder: '$(Build.ArtifactStagingDirectory)/apk'

# Publish artifacts
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'


